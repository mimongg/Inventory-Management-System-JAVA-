/**
 *
 * @author Prince Mercado
 */
import com.formdev.flatlaf.FlatDarkLaf;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JPanel;
import java.awt.GridLayout;
import javax.swing.JTextField;
import javax.swing.*;
import java.awt.*;
import java.util.List;



public class MainJFrame extends javax.swing.JFrame {
public static String product_name_label;
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        populateProductList();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel15 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1000, 490));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(224, 224, 224));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Select Your");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(224, 224, 224));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Product");

        jTextField1.setBackground(new java.awt.Color(56, 56, 56));
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setToolTipText("");
        jTextField1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(224, 224, 224));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Enter Product Name");

        jButton2.setBackground(new java.awt.Color(56, 56, 56));
        jButton2.setForeground(new java.awt.Color(224, 224, 224));
        jButton2.setText("Search");
        jButton2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(153, 153, 153));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("--------------- or ---------------");

        jButton3.setBackground(new java.awt.Color(56, 56, 56));
        jButton3.setForeground(new java.awt.Color(224, 224, 224));
        jButton3.setText("Add Product");
        jButton3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(56, 56, 56));
        jButton1.setForeground(new java.awt.Color(224, 224, 224));
        jButton1.setText("Close");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(224, 224, 224));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Product ID: 05-21-2024");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jButton5.setBackground(new java.awt.Color(51, 51, 51));
        jButton5.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton5.setForeground(new java.awt.Color(224, 224, 224));
        jButton5.setText("Delete Product");
        jButton5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jPanel7.setBackground(new java.awt.Color(53, 53, 53));
        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 153, 153));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Product Category");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Category");

        jButton6.setBackground(new java.awt.Color(61, 61, 61));
        jButton6.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton6.setForeground(new java.awt.Color(224, 224, 224));
        jButton6.setText("Update");
        jButton6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(53, 53, 53));
        jPanel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel8.setPreferredSize(new java.awt.Dimension(134, 131));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 153, 153));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Product Brand");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(204, 204, 204));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Brand");

        jButton7.setBackground(new java.awt.Color(61, 61, 61));
        jButton7.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton7.setForeground(new java.awt.Color(224, 224, 224));
        jButton7.setText("Update");
        jButton7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel9.setBackground(new java.awt.Color(53, 53, 53));
        jPanel9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel9.setPreferredSize(new java.awt.Dimension(134, 131));

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 153, 153));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Product Supplier");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(204, 204, 204));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Supplier");

        jButton8.setBackground(new java.awt.Color(61, 61, 61));
        jButton8.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton8.setForeground(new java.awt.Color(224, 224, 224));
        jButton8.setText("Update");
        jButton8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel10.setBackground(new java.awt.Color(53, 53, 53));
        jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel10.setPreferredSize(new java.awt.Dimension(134, 131));

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(153, 153, 153));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Product Quantity");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(204, 204, 204));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Quantity");

        jButton9.setBackground(new java.awt.Color(61, 61, 61));
        jButton9.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton9.setForeground(new java.awt.Color(224, 224, 224));
        jButton9.setText("Update");
        jButton9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(53, 53, 53));
        jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel11.setPreferredSize(new java.awt.Dimension(134, 131));

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(153, 153, 153));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Product Cost");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(204, 204, 204));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Unit Cost");

        jButton10.setBackground(new java.awt.Color(61, 61, 61));
        jButton10.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton10.setForeground(new java.awt.Color(224, 224, 224));
        jButton10.setText("Update");
        jButton10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel12.setBackground(new java.awt.Color(53, 53, 53));
        jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel12.setPreferredSize(new java.awt.Dimension(134, 131));

        jLabel20.setBackground(new java.awt.Color(255, 255, 255));
        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(153, 153, 153));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Product Location");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(204, 204, 204));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Location");

        jButton11.setBackground(new java.awt.Color(61, 61, 61));
        jButton11.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton11.setForeground(new java.awt.Color(224, 224, 224));
        jButton11.setText("Update");
        jButton11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton11MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel13.setBackground(new java.awt.Color(53, 53, 53));
        jPanel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel13.setPreferredSize(new java.awt.Dimension(134, 131));

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 153, 153));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Product Price");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(204, 204, 204));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Selling Price");

        jButton12.setBackground(new java.awt.Color(61, 61, 61));
        jButton12.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButton12.setForeground(new java.awt.Color(224, 224, 224));
        jButton12.setText("Update");
        jButton12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton12MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 30)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(224, 224, 224));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Product Name");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
        );

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("I N V E N T O R Y     M A N A G E M E N T     S Y S T E M     C O P Y R I G H T     @ 2 0 2 4");

        jPanel6.setBackground(new java.awt.Color(51, 51, 51));
        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(224, 224, 224));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Last Modified: Jan 26, 2024");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jScrollPane1.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jList1.setBackground(new java.awt.Color(56, 56, 56));
        jList1.setBorder(null);
        jList1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jList1.setForeground(new java.awt.Color(224, 224, 224));
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Products shows here." };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jList1);

        jPanel15.setBackground(new java.awt.Color(56, 56, 56));
        jPanel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(224, 224, 224));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Product List");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        dispose();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        product_name_label = jTextField1.getText();
        jTextField1.setText("");
    if (!product_name_label.isEmpty()) {
        boolean itemExists = SearchInventory.readProduct(product_name_label);
        if (itemExists) {
            jLabel5.setText(product_name_label);
            jLabel11.setText(SearchInventory.category);
            jLabel12.setText(SearchInventory.brand);
            jLabel14.setText(SearchInventory.supplier);
            jLabel16.setText(SearchInventory.quantity);
            jLabel18.setText(SearchInventory.unitCost);
            jLabel20.setText(SearchInventory.location);
            jLabel22.setText(SearchInventory.sellingPrice);
            jLabel8.setText("Product ID: " + SearchInventory.productId);
            jLabel10.setText("Last Modified: " + SearchInventory.modified);
        } else {
            JOptionPane.showMessageDialog(null, "Item not found in the database.");
            jLabel5.setText("Product Name");
                        jLabel11.setText("Product Category");
                        jLabel12.setText("Product Brand");
                        jLabel14.setText("Product Supplier");
                        jLabel16.setText("Product Quantity");
                        jLabel18.setText("Product Cost");
                        jLabel20.setText("Product Location");
                        jLabel22.setText("Product Price");
                        jLabel8.setText("Product ID: 05-21-2024");
                        jLabel10.setText("Last Modified: Jan 26, 2024");

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please enter a value.");
        jLabel5.setText("Product Name");
                        jLabel11.setText("Product Category");
                        jLabel12.setText("Product Brand");
                        jLabel14.setText("Product Supplier");
                        jLabel16.setText("Product Quantity");
                        jLabel18.setText("Product Cost");
                        jLabel20.setText("Product Location");
                        jLabel22.setText("Product Price");
                        jLabel8.setText("Product ID: 05-21-2024");
                        jLabel10.setText("Last Modified: Jan 26, 2024");

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
    }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        if(product_name_label != null && !product_name_label.isEmpty() && !product_name_label.isBlank()){
            boolean found = SearchInventory.readProduct(product_name_label);
            if (found) {
                // If found, delete the product
                int confirm =JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this product?");
                if (confirm == JOptionPane.YES_OPTION){
                boolean deleted = ProductDeleter.deleteProduct(product_name_label);
                if (deleted) {
                    System.out.println("Product deleted successfully.");
                    JOptionPane.showMessageDialog(null, "Product deleted successfully.");
                    // Show a confirmation dialog
                        jLabel5.setText("Product Name");
                        jLabel11.setText("Product Category");
                        jLabel12.setText("Product Brand");
                        jLabel14.setText("Product Supplier");
                        jLabel16.setText("Product Quantity");
                        jLabel18.setText("Product Cost");
                        jLabel20.setText("Product Location");
                        jLabel22.setText("Product Price");
                        jLabel8.setText("Product ID: 05-21-2024");
                        jLabel10.setText("Last Modified: Jan 26, 2024");

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
                        populateProductList();
                } else {
                    System.out.println("Failed to delete the product.");
                    JOptionPane.showMessageDialog(null, "Failed to delete the product.");
                }
            }} else {
                JOptionPane.showMessageDialog(null, "Item not found in the database.");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Invalid product name.");
        }

    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        if(product_name_label != null && !product_name_label.isEmpty() && !product_name_label.isBlank()){
        boolean found = SearchInventory.readProduct(product_name_label);
        if(found){
            try {
        // Assuming SearchInventory.productId is already set and is an int
        int productId = SearchInventory.productId;
        
        // Show input dialog to get new category from the user
        String newCategory = JOptionPane.showInputDialog(null, "Enter new category:", "Update Category", JOptionPane.PLAIN_MESSAGE);

        // If user provided input (newCategory is not null)
        if (newCategory != null && !newCategory.trim().isEmpty()) {
            // Call the method to update the category
            boolean isUpdated = ProductUpdater.updateCategory(productId, newCategory);

            if (isUpdated) {
                // Show a confirmation dialog
                JOptionPane.showMessageDialog(null, "Category updated successfully.");
                // Update SearchInventory static fields if needed
                        SearchInventory.category = newCategory;

                        // Show a confirmation dialog
                        jLabel5.setText(product_name_label);
                        jLabel11.setText(SearchInventory.category);
                        jLabel12.setText(SearchInventory.brand);
                        jLabel14.setText(SearchInventory.supplier);
                        jLabel16.setText(SearchInventory.quantity);
                        jLabel18.setText(SearchInventory.unitCost);
                        jLabel20.setText(SearchInventory.location);
                        jLabel22.setText(SearchInventory.sellingPrice);
                        jLabel8.setText("Product ID: " + SearchInventory.productId);
                        jLabel10.setText("Last Modified: " + SearchInventory.modified);

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
            } else {
                // Show a message if no matching product was found
                JOptionPane.showMessageDialog(null, "Failed to update the category. No matching product found.");
            }
        } else {
            // Show a message if no input was provided
            JOptionPane.showMessageDialog(null, "No input provided. Category update canceled.");
        }
    } catch (SQLException ex) {
        // Handle SQL exceptions
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "An error occurred while updating the category: " + ex.getMessage());
    } catch (Exception ex) {
        // Handle other potential exceptions
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "An error occurred while updating the category.");
    }

        }
        else {
                JOptionPane.showMessageDialog(null, "Item not found in the database.");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Invalid product name.");
        }
        
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        // Check if the product name is not null, not empty, and not blank
    if (product_name_label != null && !product_name_label.isEmpty() && !product_name_label.isBlank()) {
        // Search for the product in the inventory
        boolean found = SearchInventory.readProduct(product_name_label);
        
        if (found) {
            try {
                // Show input dialog to get new brand from the user
                String newBrand = JOptionPane.showInputDialog(null, "Enter new brand:", "Update Brand", JOptionPane.PLAIN_MESSAGE);

                // If user provided input (newBrand is not null)
                if (newBrand != null && !newBrand.trim().isEmpty()) {
                    // Call the method to update the brand
                    boolean isUpdated = ProductUpdater.updateBrand(SearchInventory.productId, newBrand);

                    if (isUpdated) {
                        // Show a confirmation dialog
                        JOptionPane.showMessageDialog(null, "Brand updated successfully.");
                        // Update SearchInventory static fields if needed
                        SearchInventory.brand = newBrand;

                        // Show a confirmation dialog
                        jLabel5.setText(product_name_label);
                        jLabel11.setText(SearchInventory.category);
                        jLabel12.setText(SearchInventory.brand);
                        jLabel14.setText(SearchInventory.supplier);
                        jLabel16.setText(SearchInventory.quantity);
                        jLabel18.setText(SearchInventory.unitCost);
                        jLabel20.setText(SearchInventory.location);
                        jLabel22.setText(SearchInventory.sellingPrice);
                        jLabel8.setText("Product ID: " + SearchInventory.productId);
                        jLabel10.setText("Last Modified: " + SearchInventory.modified);

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
                    } else {
                        // Show a message if no matching product was found
                        JOptionPane.showMessageDialog(null, "Failed to update the brand. No matching product found.");
                    }
                } else {
                    // Show a message if no input was provided
                    JOptionPane.showMessageDialog(null, "No input provided. Brand update canceled.");
                }
            } catch (SQLException ex) {
                // Handle SQL exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the brand: " + ex.getMessage());
            } catch (Exception ex) {
                // Handle other potential exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the brand.");
            }
        } else {
            // Show a message if the product is not found in the database
            JOptionPane.showMessageDialog(null, "Item not found in the database.");
        }
    } else {
        // Show a message if the product name is invalid
        JOptionPane.showMessageDialog(null, "Invalid product name.");
    }
    }//GEN-LAST:event_jButton7MouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
        // Check if the product name is not null, not empty, and not blank
    if (product_name_label != null && !product_name_label.isEmpty() && !product_name_label.isBlank()) {
        // Search for the product in the inventory
        boolean found = SearchInventory.readProduct(product_name_label);
        
        if (found) {
            try {
                // Show input dialog to get new supplier from the user
                String newSupplier = JOptionPane.showInputDialog(null, "Enter new supplier:", "Update Supplier", JOptionPane.PLAIN_MESSAGE);

                // If user provided input (newSupplier is not null or empty)
                if (newSupplier != null && !newSupplier.trim().isEmpty()) {
                    // Call the method to update the supplier
                    boolean isUpdated = ProductUpdater.updateSupplier(SearchInventory.productId, newSupplier);

                    if (isUpdated) {
                        // Show a confirmation dialog
                        JOptionPane.showMessageDialog(null, "Supplier updated successfully.");
                        // Update SearchInventory static fields if needed
                        SearchInventory.supplier = newSupplier;

                        // Show a confirmation dialog
                        jLabel5.setText(product_name_label);
                        jLabel11.setText(SearchInventory.category);
                        jLabel12.setText(SearchInventory.brand);
                        jLabel14.setText(SearchInventory.supplier);
                        jLabel16.setText(SearchInventory.quantity);
                        jLabel18.setText(SearchInventory.unitCost);
                        jLabel20.setText(SearchInventory.location);
                        jLabel22.setText(SearchInventory.sellingPrice);
                        jLabel8.setText("Product ID: " + SearchInventory.productId);
                        jLabel10.setText("Last Modified: " + SearchInventory.modified);

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
                    } else {
                        // Show a message if no matching product was found or if the update failed
                        JOptionPane.showMessageDialog(null, "Failed to update the supplier. No matching product found or update failed.");
                    }
                } else {
                    // Show a message if no input was provided for the supplier
                    JOptionPane.showMessageDialog(null, "No input provided for the supplier. Update canceled.");
                }
            } catch (SQLException ex) {
                // Handle SQL exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the supplier: " + ex.getMessage());
            } catch (Exception ex) {
                // Handle other potential exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the supplier.");
            }
        } else {
            // Show a message if the product is not found in the database
            JOptionPane.showMessageDialog(null, "Item not found in the database.");
        }
    } else {
        // Show a message if the product name is invalid
        JOptionPane.showMessageDialog(null, "Invalid product name.");
    }
    }//GEN-LAST:event_jButton8MouseClicked

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
        // Check if the product name is not null, not empty, and not blank
    if (product_name_label != null && !product_name_label.isEmpty() && !product_name_label.isBlank()) {
        // Search for the product in the inventory
        boolean found = SearchInventory.readProduct(product_name_label);

        if (found) {
            try {
                // Show input dialog to get new quantity from the user
                String newQuantityStr = JOptionPane.showInputDialog(null, "Enter new quantity:", "Update Quantity", JOptionPane.PLAIN_MESSAGE);

                // If user provided input (newQuantityStr is not null or empty)
                if (newQuantityStr != null && !newQuantityStr.trim().isEmpty()) {
                    int newQuantity = Integer.parseInt(newQuantityStr.trim());
                    
                    // Call the method to update the quantity
                    boolean isUpdated = ProductUpdater.updateQuantity(SearchInventory.productId, newQuantity);

                    if (isUpdated) {
                        // Show a confirmation dialog
                        JOptionPane.showMessageDialog(null, "Quantity updated successfully.");
                        // Update SearchInventory static fields if needed
                        SearchInventory.quantity = newQuantityStr;

                        // Show a confirmation dialog
                        jLabel5.setText(product_name_label);
                        jLabel11.setText(SearchInventory.category);
                        jLabel12.setText(SearchInventory.brand);
                        jLabel14.setText(SearchInventory.supplier);
                        jLabel16.setText(SearchInventory.quantity);
                        jLabel18.setText(SearchInventory.unitCost);
                        jLabel20.setText(SearchInventory.location);
                        jLabel22.setText(SearchInventory.sellingPrice);
                        jLabel8.setText("Product ID: " + SearchInventory.productId);
                        jLabel10.setText("Last Modified: " + SearchInventory.modified);

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
                    } else {
                        // Show a message if no matching product was found or if the update failed
                        JOptionPane.showMessageDialog(null, "Failed to update the quantity. No matching product found or update failed.");
                    }
                } else {
                    // Show a message if no input was provided for the quantity
                    JOptionPane.showMessageDialog(null, "No input provided for the quantity. Update canceled.");
                }
            } catch (NumberFormatException ex) {
                // Handle number format exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid number for the quantity.");
            } catch (SQLException ex) {
                // Handle SQL exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the quantity: " + ex.getMessage());
            } catch (Exception ex) {
                // Handle other potential exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the quantity.");
            }
        } else {
            // Show a message if the product is not found in the database
            JOptionPane.showMessageDialog(null, "Item not found in the database.");
        }
    } else {
        // Show a message if the product name is invalid
        JOptionPane.showMessageDialog(null, "Invalid product name.");
    }
    }//GEN-LAST:event_jButton9MouseClicked

    private void jButton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseClicked
        // Check if the product name is not null, not empty, and not blank
    if (product_name_label != null && !product_name_label.isEmpty() && !product_name_label.isBlank()) {
        // Search for the product in the inventory
        boolean found = SearchInventory.readProduct(product_name_label);

        if (found) {
            try {
                // Show input dialog to get new unit cost from the user
                String newUnitCostStr = JOptionPane.showInputDialog(null, "Enter new unit cost:", "Update Unit Cost", JOptionPane.PLAIN_MESSAGE);

                // If user provided input (newUnitCostStr is not null or empty)
                if (newUnitCostStr != null && !newUnitCostStr.trim().isEmpty()) {
                    double newUnitCost = Double.parseDouble(newUnitCostStr.trim());

                    // Call the method to update the unit cost
                    boolean isUpdated = ProductUpdater.updateUnitCost(SearchInventory.productId, newUnitCost);

                    if (isUpdated) {
                        // Show a confirmation dialog
                        JOptionPane.showMessageDialog(null, "Unit cost updated successfully.");
                        // Update SearchInventory static fields if needed
                        SearchInventory.unitCost = newUnitCostStr;

                        // Show a confirmation dialog
                        jLabel5.setText(product_name_label);
                        jLabel11.setText(SearchInventory.category);
                        jLabel12.setText(SearchInventory.brand);
                        jLabel14.setText(SearchInventory.supplier);
                        jLabel16.setText(SearchInventory.quantity);
                        jLabel18.setText(SearchInventory.unitCost);
                        jLabel20.setText(SearchInventory.location);
                        jLabel22.setText(SearchInventory.sellingPrice);
                        jLabel8.setText("Product ID: " + SearchInventory.productId);
                        jLabel10.setText("Last Modified: " + SearchInventory.modified);

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
                    } else {
                        // Show a message if no matching product was found or if the update failed
                        JOptionPane.showMessageDialog(null, "Failed to update the unit cost. No matching product found or update failed.");
                    }
                } else {
                    // Show a message if no input was provided for the unit cost
                    JOptionPane.showMessageDialog(null, "No input provided for the unit cost. Update canceled.");
                }
            } catch (NumberFormatException ex) {
                // Handle number format exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid number for the unit cost.");
            } catch (SQLException ex) {
                // Handle SQL exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the unit cost: " + ex.getMessage());
            } catch (Exception ex) {
                // Handle other potential exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the unit cost.");
            }
        } else {
            // Show a message if the product is not found in the database
            JOptionPane.showMessageDialog(null, "Item not found in the database.");
        }
    } else {
        // Show a message if the product name is invalid
        JOptionPane.showMessageDialog(null, "Invalid product name.");
    }
    }//GEN-LAST:event_jButton10MouseClicked

    private void jButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseClicked
        // Check if the product name is not null, not empty, and not blank
    if (product_name_label != null && !product_name_label.isEmpty() && !product_name_label.isBlank()) {
        // Search for the product in the inventory
        boolean found = SearchInventory.readProduct(product_name_label);

        if (found) {
            try {
                // Show input dialog to get new location from the user
                String newLocation = JOptionPane.showInputDialog(null, "Enter new location:", "Update Location", JOptionPane.PLAIN_MESSAGE);

                // If user provided input (newLocation is not null or empty)
                if (newLocation != null && !newLocation.trim().isEmpty()) {
                    // Call the method to update the location
                    boolean isUpdated = ProductUpdater.updateLocation(SearchInventory.productId, newLocation);

                    if (isUpdated) {
                        // Show a confirmation dialog
                        JOptionPane.showMessageDialog(null, "Location updated successfully.");
                        // Update SearchInventory static fields if needed
                        SearchInventory.location = newLocation;

                        // Show a confirmation dialog
                        jLabel5.setText(product_name_label);
                        jLabel11.setText(SearchInventory.category);
                        jLabel12.setText(SearchInventory.brand);
                        jLabel14.setText(SearchInventory.supplier);
                        jLabel16.setText(SearchInventory.quantity);
                        jLabel18.setText(SearchInventory.unitCost);
                        jLabel20.setText(SearchInventory.location);
                        jLabel22.setText(SearchInventory.sellingPrice);
                        jLabel8.setText("Product ID: " + SearchInventory.productId);
                        jLabel10.setText("Last Modified: " + SearchInventory.modified);

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
                    } else {
                        // Show a message if no matching product was found or if the update failed
                        JOptionPane.showMessageDialog(null, "Failed to update the location. No matching product found or update failed.");
                    }
                } else {
                    // Show a message if no input was provided for the location
                    JOptionPane.showMessageDialog(null, "No input provided for the location. Update canceled.");
                }
            } catch (SQLException ex) {
                // Handle SQL exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the location: " + ex.getMessage());
            } catch (Exception ex) {
                // Handle other potential exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the location.");
            }
        } else {
            // Show a message if the product is not found in the database
            JOptionPane.showMessageDialog(null, "Item not found in the database.");
        }
    } else {
        // Show a message if the product name is invalid
        JOptionPane.showMessageDialog(null, "Invalid product name.");
    }
    }//GEN-LAST:event_jButton11MouseClicked

    private void jButton12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseClicked
        // Check if the product name is not null, not empty, and not blank
    if (product_name_label != null && !product_name_label.isEmpty() && !product_name_label.isBlank()) {
        // Search for the product in the inventory
        boolean found = SearchInventory.readProduct(product_name_label);

        if (found) {
            try {
                // Show input dialog to get new selling price from the user
                String newSellingPriceStr = JOptionPane.showInputDialog(null, "Enter new selling price:", "Update Selling Price", JOptionPane.PLAIN_MESSAGE);

                // If user provided input (newSellingPriceStr is not null or empty)
                if (newSellingPriceStr != null && !newSellingPriceStr.trim().isEmpty()) {
                    double newSellingPrice = Double.parseDouble(newSellingPriceStr.trim());

                    // Call the method to update the selling price
                    boolean isUpdated = ProductUpdater.updateSellingPrice(SearchInventory.productId, newSellingPrice);

                    if (isUpdated) {
                        // Show a confirmation dialog
                        JOptionPane.showMessageDialog(null, "Selling price updated successfully.");
                        // Update SearchInventory static fields if needed
                        SearchInventory.sellingPrice = newSellingPriceStr;

                        // Show a confirmation dialog
                        jLabel5.setText(product_name_label);
                        jLabel11.setText(SearchInventory.category);
                        jLabel12.setText(SearchInventory.brand);
                        jLabel14.setText(SearchInventory.supplier);
                        jLabel16.setText(SearchInventory.quantity);
                        jLabel18.setText(SearchInventory.unitCost);
                        jLabel20.setText(SearchInventory.location);
                        jLabel22.setText(SearchInventory.sellingPrice);
                        jLabel8.setText("Product ID: " + SearchInventory.productId);
                        jLabel10.setText("Last Modified: " + SearchInventory.modified);

                        // Repaint the panel to ensure the UI is refreshed
                        jLabel5.repaint();
                        jLabel11.repaint();
                        jLabel12.repaint();
                        jLabel14.repaint();
                        jLabel16.repaint();
                        jLabel18.repaint();
                        jLabel20.repaint();
                        jLabel22.repaint();
                        jLabel8.repaint();
                        jLabel10.repaint();
                        
                    } else {
                        // Show a message if no matching product was found or if the update failed
                        JOptionPane.showMessageDialog(null, "Failed to update the selling price. No matching product found or update failed.");
                    }
                } else {
                    // Show a message if no input was provided for the selling price
                    JOptionPane.showMessageDialog(null, "No input provided for the selling price. Update canceled.");
                }
            } catch (NumberFormatException ex) {
                // Handle number format exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid number for the selling price.");
            } catch (SQLException ex) {
                // Handle SQL exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the selling price: " + ex.getMessage());
            } catch (Exception ex) {
                // Handle other potential exceptions
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the selling price.");
            }
        } else {
            // Show a message if the product is not found in the database
            JOptionPane.showMessageDialog(null, "Item not found in the database.");
        }
    } else {
        // Show a message if the product name is invalid
        JOptionPane.showMessageDialog(null, "Invalid product name.");
    }
    }//GEN-LAST:event_jButton12MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // Create a custom panel to collect input for multiple product entries
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(0, 2)); // 0 rows, 2 columns

        // Add input fields for each product attribute
        JTextField productNameField = new JTextField(20);
        JTextField categoryField = new JTextField(20);
        JTextField brandField = new JTextField(20);
        JTextField supplierField = new JTextField(20);
        JTextField unitCostField = new JTextField(20);
        JTextField quantityField = new JTextField(20);
        JTextField sellingPriceField = new JTextField(20);
        JTextField locationField = new JTextField(20);

        inputPanel.add(new JLabel("Product Name:"));
        inputPanel.add(productNameField);
        inputPanel.add(new JLabel("Category:"));
        inputPanel.add(categoryField);
        inputPanel.add(new JLabel("Brand:"));
        inputPanel.add(brandField);
        inputPanel.add(new JLabel("Supplier:"));
        inputPanel.add(supplierField);
        inputPanel.add(new JLabel("Unit Cost:"));
        inputPanel.add(unitCostField);
        inputPanel.add(new JLabel("Quantity:"));
        inputPanel.add(quantityField);
        inputPanel.add(new JLabel("Selling Price:"));
        inputPanel.add(sellingPriceField);
        inputPanel.add(new JLabel("Location:"));
        inputPanel.add(locationField);

        // Display the custom input panel in a dialog with a custom button text
        int option = JOptionPane.showOptionDialog(null, inputPanel, "Enter Product Details", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, new String[]{"Add", "Cancel"}, "Add");
        if (option == 0) { // 0 represents the "Add" button
            // Check if any text fields are blank
            if (productNameField.getText().isEmpty() || categoryField.getText().isEmpty() ||
                    brandField.getText().isEmpty() || supplierField.getText().isEmpty() ||
                    unitCostField.getText().isEmpty() || quantityField.getText().isEmpty() ||
                    sellingPriceField.getText().isEmpty() || locationField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please fill in all the fields.");
                return; // Exit method if any field is blank
            }

            try {
                // Retrieve input data for each product entry
                String productName = productNameField.getText();
                String category = categoryField.getText();
                String brand = brandField.getText();
                String supplier = supplierField.getText();
                double unitCost = Double.parseDouble(unitCostField.getText());
                int quantity = Integer.parseInt(quantityField.getText());
                double sellingPrice = Double.parseDouble(sellingPriceField.getText());
                String location = locationField.getText();

                // Call the method to create a new product entry
                boolean isCreated = ProductCreator.createProduct(productName, category, brand, supplier,
                        unitCost, quantity, sellingPrice, location);

                if (isCreated) {
                    JOptionPane.showMessageDialog(null, "Product created successfully.");
                    populateProductList();
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to create product(s).");
                }
            } catch (NumberFormatException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter valid numerical values.");
            }
        }
    }//GEN-LAST:event_jButton3MouseClicked
private void populateProductList() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        try {
            List<String> productNames = ProductFetcher.getAllProductNames();
            for (String productName : productNames) {
                listModel.addElement(productName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to retrieve product names from the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        jList1.setModel(listModel);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the FlatDarkLaf look and feel */
    FlatDarkLaf.setup();
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            MainJFrame frame = new MainJFrame();
            frame.setLocationRelativeTo(null); // Center the frame on the screen
            frame.setVisible(true);
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
